#[cfg(test)]
mod tests {
 use stringreader::StringReader;

 use blockwise_reader::BlockWiseReader;
 use blockwise_reader::Error;

 #[test]
 fn test001() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert_eq!(0, bwr.available_bytes());
  assert_eq!(0, bwr.pos_get());
  assert_eq!(None, bwr.find(b'1'));
  assert_eq!(None, bwr.search(&[b'1']));
  assert_eq!("".as_bytes(), bwr.get());
  assert_eq!(3, bwr.slurp(1000)?);
  assert_eq!(Some(0), bwr.find(b'1'));
  assert_eq!(Some(0), bwr.search(&[b'1']));
  assert_eq!(3, bwr.available_bytes());
  assert_eq!(0, bwr.pos_get());
  assert_eq!(3, bwr.size());
  assert_eq!("123".as_bytes(), bwr.get());
  assert_eq!(3, bwr.slurp(1000)?);
  assert_eq!("123".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test002() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert_eq!("".as_bytes(), bwr.get());
  assert_eq!(3, bwr.slurp(3)?);
  assert_eq!(3, bwr.available_bytes());
  assert_eq!(0, bwr.pos_get());
  assert_eq!("123".as_bytes(), bwr.get());
  assert_eq!(3, bwr.slurp(3)?);
  assert_eq!("123".as_bytes(), bwr.get());
  assert_eq!(3, bwr.slurp(0)?);
  assert_eq!("123".as_bytes(), bwr.get());
  assert_eq!(4, bwr.slurp(4)?);
  assert_eq!("1234".as_bytes(), bwr.get());
  bwr.pos_add(2);
  assert_eq!(2, bwr.available_bytes());
  assert_eq!(4, bwr.size());
  assert_eq!(2, bwr.pos_get());
  assert_eq!("1234".as_bytes(), bwr.get_back(2));
  assert_eq!(4, bwr.slurp(4)?);
  assert_eq!("3456".as_bytes(), bwr.get());
  bwr.pos_add(2);
  assert_eq!(2, bwr.available_bytes());
  assert_eq!(4, bwr.pos_get());
  assert_eq!("56".as_bytes(), bwr.get());
  bwr.pos_add(2);
  assert_eq!("".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test003() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert!(bwr.slurp_match_repos(&"123".as_bytes())?);
  assert!(bwr.slurp_match_repos(&"456".as_bytes())?);
  assert!(bwr.slurp_match_repos(&"".as_bytes())?);
  assert!(!bwr.slurp_match_repos(&"x".as_bytes())?);
  Ok(())
 }

 #[test]
 fn test004() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert!(!bwr.slurp_find_repos1(1000, b'9')?);
  assert!(bwr.slurp_find_repos1(1000, b'3')?);
  assert_eq!("456".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test005() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert!(bwr.slurp_find_repos1(1000, b'3')?);
  assert!(!bwr.slurp_find_repos1(1000, b'9')?);
  assert_eq!("456".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test006() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert!(bwr.slurp_find_repos0(1000, b'3')?);
  assert_eq!("3456".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test007() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert_eq!(None, bwr.search("34".as_bytes()));
  assert!(bwr.slurp_search_repos1(1000, "34".as_bytes())?);
  assert_eq!(Some(0), bwr.search("56".as_bytes()));
  assert_eq!("56".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test008() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert_eq!(None, bwr.search("34".as_bytes()));
  assert!(bwr.slurp_search_repos0(1000, "34".as_bytes())?);
  assert_eq!(Some(0), bwr.search("34".as_bytes()));
  assert_eq!("3456".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test009() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert_eq!(6, bwr.slurp(6)?);
  assert!(bwr.slurp_search_repos1(1000, "123".as_bytes())?);
  assert_eq!(3, bwr.pos_get());
  assert_eq!("456".as_bytes(), bwr.get());
  assert_eq!("123".as_bytes(), bwr.pos_cut());
  assert_eq!(0, bwr.pos_get());
  assert_eq!("456".as_bytes(), bwr.get());
  bwr.pos_set(1);
  bwr.pos_inject("abc".as_bytes());
  bwr.pos_set(0);
  assert_eq!("4abc56".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test_slurp_loop() -> Result<(), std::io::Error> {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  assert_eq!(6, bwr.slurp_loop(1)?);
  assert_eq!(0, bwr.pos_get());
  assert_eq!(6, bwr.available_bytes());
  assert_eq!("123456".as_bytes(), bwr.get());
  Ok(())
 }

 #[test]
 fn test_practcal_example_001() -> Result<(), std::io::Error> {
  let sr = StringReader::new(
   r#"# Generated by NetworkManager
search localdomain
nameserver 8.8.8.8
"#,
  );

  let mut bwr = BlockWiseReader::new(Box::new(sr));

  assert!(bwr.slurp_match_repos("# Generated by NetworkManager\n".as_bytes())?);
  assert!(bwr.slurp_find_repos1(1024, b'\n')?);
  assert!(bwr.slurp_match_repos("nameserver ".as_bytes())?);
  let pos = bwr.pos_get();
  assert!(bwr.slurp_find_repos0(1024, b'\n')?);
  assert_eq!("8.8.8.8".as_bytes(), bwr.get_from_to_current(pos));

  Ok(())
 }

 #[test]
 fn test_00b() -> Result<(), Error> {
  for i in 1..7 {
   let sr = StringReader::new("123456");
   let mut bwr = BlockWiseReader::new(Box::new(sr));
   let res = bwr.slurp_find_repos_loop(i, b'5', blockwise_reader::FindPos::Begin)?;
   assert!(res);
   assert_eq!(4, bwr.pos_get());
  }
  Ok(())
 }

 #[test]
 fn test_00b_3() -> Result<(), Error> {
  for i in 1..7 {
   let sr = StringReader::new("123456");
   let mut bwr = BlockWiseReader::new(Box::new(sr));
   let res = bwr.slurp_find_repos_loop(i, b'5', blockwise_reader::FindPos::End)?;
   assert!(res);
   assert_eq!(5, bwr.pos_get());
  }
  Ok(())
 }

 #[test]
 fn test_00b_3_2() -> Result<(), Error> {
  for i in 1..7 {
   let sr = StringReader::new("123456");
   let mut bwr = BlockWiseReader::new(Box::new(sr));
   assert_eq!(4, bwr.slurp(4)?);
   let res = bwr.slurp_find_repos_loop(i, b'5', blockwise_reader::FindPos::End)?;
   assert!(res);
   assert_eq!(5, bwr.pos_get());
  }
  Ok(())
 }

 #[test]
 fn test_00b_2() -> Result<(), Error> {
  for i in 1..7 {
   let sr = StringReader::new("123456");
   let mut bwr = BlockWiseReader::new(Box::new(sr));
   bwr.pos_set(1);
   let res = bwr.slurp_find_repos_loop(i, b'9', blockwise_reader::FindPos::Begin)?;
   assert!(!res);
   assert_eq!(1, bwr.pos_get());
  }
  Ok(())
 }

 #[test]
 fn test_00c() {
  let sr = StringReader::new("123456");
  let mut bwr = BlockWiseReader::new(Box::new(sr));
  let res = bwr.slurp_find_repos_loop(0, b'5', blockwise_reader::FindPos::Begin);
  // assert_eq!(res, Err(Error::Msg("")));
  match res {
   Err(Error::Msg(x)) => assert_eq!(x, "buffersize 0 leads to an infinite loop"),
   _ => panic!(),
  }
 }

 #[test]
 fn test_00d() -> Result<(), Error> {
  for i in 3..10 {
   let sr = StringReader::new("123456789");
   let mut bwr = BlockWiseReader::new(Box::new(sr));
   let res = bwr.slurp_search_repos_loop(i, "67".as_bytes(), blockwise_reader::FindPos::Begin)?;
   assert!(res);
   assert_eq!(5, bwr.pos_get());
  }
  Ok(())
 }

 #[test]
 fn test_00d_2() -> Result<(), Error> {
  for i in 3..10 {
   let sr = StringReader::new("123456789");
   let mut bwr = BlockWiseReader::new(Box::new(sr));
   let res = bwr.slurp_search_repos_loop(i, "67".as_bytes(), blockwise_reader::FindPos::End)?;
   assert!(res);
   assert_eq!(7, bwr.pos_get());
  }
  Ok(())
 }

 #[test]
 fn test_00e() -> Result<(), Error> {
  for i in 1..7 {
   let sr = StringReader::new("123456");
   let mut bwr = BlockWiseReader::new(Box::new(sr));
   let res =
    bwr.slurp_find_multiple_repos(i, &[b'5', b'4'], false, blockwise_reader::FindPos::Begin)?;
   if i < 4 {
    assert!(!res);
    assert_eq!(0, bwr.pos_get());
   } else {
    assert!(res);
    assert_eq!(3, bwr.pos_get());
   }
  }
  Ok(())
 }

 #[test]
 fn test_00e_2() -> Result<(), Error> {
  for i in 1..7 {
   let sr = StringReader::new("123456");
   let mut bwr = BlockWiseReader::new(Box::new(sr));
   let res =
    bwr.slurp_find_multiple_repos(i, &[b'5', b'4'], true, blockwise_reader::FindPos::Begin)?;
   println!("i: {}", i);
   if i < 4 {
    assert!(!res);
    assert_eq!(0, bwr.pos_get());
   } else if i < 5 {
    assert!(res);
    assert_eq!(3, bwr.pos_get());
   } else {
    assert!(res);
    assert_eq!(4, bwr.pos_get());
   }
  }
  Ok(())
 }
}
